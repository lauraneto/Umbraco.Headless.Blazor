@page "/{*slug}"
@using UmbracoDemo.Client.Clients
@using UmbracoDemo.Client.Models.Pages.Abstractions
@using System.Collections.Concurrent
@using UmbracoDemo.Client.Models.Pages

<CascadingValue Value="this" IsFixed="true">
    <MudAppBar Elevation="0">
        <NavMenu Page="_page" Settings="_settings" />
    </MudAppBar>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.Medium" Class="my-16 pt-16">
            @if (!_loaded)
            {
            }
            else if (_page != null && GetPageType(_page) is { } pageType)
            {
                <PageTitle>@(_page.Name) - Headless Demo</PageTitle>

                <DynamicComponent Type="@pageType" Parameters="@(new Dictionary<string, object?> { ["Page"] = _page })" />
            }
            else
            {
                <PageTitle>404 - Headless Demo</PageTitle>

                <MudText Typo="Typo.h1" GutterBottom="true">404 - Not Found</MudText>

                <MudText Typo="Typo.body1" GutterBottom="true">Unfortunately I couldn't find what you are looking for 😔</MudText>
            }
        </MudContainer>
    </MudMainContent>
</CascadingValue>

@code {
    [Parameter]
    public required string Slug { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "query")]
    public string? Query { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "page")]
    public int? PageNumber { get; set; }

    [Inject]
    public required IUmbracoClient UmbracoClient { get; set; }

    private bool _loaded;
    private BasePage? _page;
    private Settings? _settings;

    protected override async Task OnParametersSetAsync()
    {
        _loaded = false;

        var slug = $"/{Slug}";
        if (slug != _page?.Path)
        {
            _page = await UmbracoClient.GetContentByPath($"/{Slug}");
        }

        var culture = _page?.Culture ?? "en-US";
        if (_settings?.Culture != culture)
        {
            _settings = await UmbracoClient.GetContentSingleByType<Settings>(culture);
        }

        _loaded = true;
    }

    protected override bool ShouldRender() => _loaded;

    private static readonly ConcurrentDictionary<string, Type?> Pages = new();
    private static Type? GetPageType(BasePage page) =>
        Pages.GetOrAdd(page.GetType().Name, key =>
        {
            var markerType = typeof(Index);
            return markerType.Assembly.GetType($"{markerType.Namespace}.{key}", false, true);
        });
}