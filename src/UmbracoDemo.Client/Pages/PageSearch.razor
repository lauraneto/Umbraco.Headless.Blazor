<Hero Title="@(Page?.Properties.Title ?? Page?.Name)" Intro="@(Page?.Properties.Intro?.Markup)" />
<MudTextField T="string" Placeholder="Ask me anything..." Label="Search" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary" DebounceInterval="500" OnDebounceIntervalElapsed="OnQueryUpdated" />

<MudGrid Class="pt-10">
    @foreach (var result in Results ?? Enumerable.Empty<IApiContentResponseModel>())
    {
        var basePage = (result as IPageComposition)?.Properties;
        <MudItem xs="12" Class="py-4">
            <MudCard>
                <MudCardContent>
                    <MudText Typo="Typo.h6">@(basePage?.Title ?? result.Name)</MudText>
                    <MudText Typo="Typo.body2" Class="line-clamp-3">@((MarkupString)(basePage?.Intro?.Markup ?? ""))</MudText>
                </MudCardContent>
                <MudCardActions>
                        <MudButton Href="@result.Route.GetUrl()" Variant="Variant.Text" Color="Color.Transparent" EndIcon="@Icons.Material.Filled.ArrowRight" HtmlTag="a">Read more</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
    }

    <MudPagination Count="_totalPages" Selected="_currentPage" SelectedChanged="OnPageChanged" />
</MudGrid>

@code {
    [Parameter]
    public PageSearch__cadContentResponseModel? Page { get; set; }

    [Inject]
    public required IUmbracoClient UmbracoClient { get; set; }

    [Inject]
    public required NavigationManager NavigationManager { get; set; }

    [CascadingParameter(Name = nameof(Query))]
    public string? Query { get; set; }

    [CascadingParameter(Name = nameof(PageNumber))]
    public int? PageNumber { get; set; }

    private const int ItemsPerPage = 4;
    private int _totalPages;
    private int _currentPage;
    private ICollection<IApiContentResponseModel>? Results { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        (Results, var total) = await UmbracoClient.Search(Query ?? "", ((PageNumber ?? 1) - 1) * ItemsPerPage, ItemsPerPage, Page?.Culture);
        _totalPages = (int)Math.Ceiling((double)total / ItemsPerPage);
        _currentPage = Math.Max(1, Math.Min(PageNumber ?? 1, _totalPages));
    }

    private void OnPageChanged(int newPage)
    {
        if (newPage == _currentPage)
        {
            return;
        }

        NavigationManager.NavigateTo(NavigationManager.GetUriWithQueryParameter("page", newPage));
    }

    private void OnQueryUpdated(string query)
    {
        NavigationManager.NavigateTo(NavigationManager.GetUriWithQueryParameters(new Dictionary<string, object?>
        {
            ["query"] = query,
            ["page"] = null,
        }));
    }
}