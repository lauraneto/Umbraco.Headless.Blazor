@using UmbracoDemo.Client.Clients
<Hero Title="@(Page?.Title ?? Page?.Name)" Intro="@(Page?.Intro?.Markup)" />

<MudGrid >
    <MudItem xs="12" sm="6" md="4">
        <MudSelect T="SortItem" Label="Sort" Value="@_currentSort" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" ValueChanged="OnSortChanged">
            @foreach (var sortOption in SortOptions)
            {
                <MudSelectItem Value="sortOption">@sortOption.Label</MudSelectItem>
            }
        </MudSelect>
    </MudItem>
    <MudItem xs="12" sm="6" md="4">
        <MudSelect T="string" Label="Tags" SelectedValues="@_currentTags" MultiSelection="true" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" SelectedValuesChanged="OnTagsChanged">
            @foreach (var tag in _tags ?? Enumerable.Empty<string>())
            {
                <MudSelectItem Value="tag">@tag</MudSelectItem>
            }
        </MudSelect>
    </MudItem>
</MudGrid>
<MudGrid >
    @foreach (var child in Children)
    {
        <MudItem @key="child.Id" xs="12" sm="6" md="4">
             <MudCard Style="display: flex; flex-direction: column; min-height: 100%;">
                 @{
                     var image = child.Image?.FirstOrDefault();
                     var imageUrl = image == null
                         ? "http://satyr.io/980x16:9"
                         : $"{ApiUrl}{image.Url}?width=400&height=270";
                 }
                 <MudCardMedia Image="@imageUrl" Height="200" />
                 <MudCardContent Style="flex: auto;">
                     <MudText Typo="Typo.h5">@(child.Title ?? child.Name)</MudText>
                     @foreach (var tag in child.Tags ?? Enumerable.Empty<string>())
                     {
                        <MudChip Variant="Variant.Text">@tag</MudChip>
                     }
                     <MudText Typo="Typo.body2" Class="py-2">Date: @(child.Date?.ToString("dd MMMM yyyy"))</MudText>
                     <MudText Typo="Typo.body2">@((MarkupString)(child.Intro?.Markup ?? ""))</MudText>
                 </MudCardContent>
                 <MudCardActions>
                     <MudButton Href="@child.Route.GetUrl()" Variant="Variant.Text" Color="Color.Transparent" EndIcon="@Icons.Material.Filled.ArrowRight">Read more</MudButton>
                 </MudCardActions>
             </MudCard>
        </MudItem>
    }
</MudGrid>

@code {
    [Parameter]
    public UmbracoDemo.Client.Models.Pages.BlogOverview? Page { get; set; }

    [Inject]
    public required IUmbracoClient UmbracoClient { get; set; }

    [Inject]
    public required IConfiguration Config { get; set; }

    private static readonly List<SortItem> SortOptions = new()
    {
        new SortItem("Date - Descending", "date", "desc"),
        new SortItem("Date - Ascending", "date", "asc"),
        new SortItem("Popularity", "sortOrder", "asc")
    };

    private List<string>? _tags;
    
    private string? ApiUrl { get; set; }

    private ICollection<UmbracoDemo.Client.Models.Pages.BlogDetail> Children { get; set; } = new List<UmbracoDemo.Client.Models.Pages.BlogDetail>();

    private SortItem? _currentSort = SortOptions[0];

    private IEnumerable<string> _currentTags = new List<string>();

    protected override void OnInitialized()
    {
        ApiUrl = Config["UmbracoApi:BaseUrl"];
    }

    protected override async Task OnParametersSetAsync()
    {
        await UpdateChildren();
    }

    private async Task OnSortChanged(SortItem currentItem)
    {
        if (_currentSort != currentItem)
        {
            _currentSort = currentItem;
            await UpdateChildren();
        }
    }

    private async Task OnTagsChanged(IEnumerable<string> tags)
    {
        _currentTags = tags;
        await UpdateChildren();
    }


    private UmbracoDemo.Client.Models.Pages.BlogOverview? _previousPage;
    private async Task UpdateChildren()
    {
        if (Page == null)
        {
            _previousPage = null;
            Children = new List<UmbracoDemo.Client.Models.Pages.BlogDetail>();
            return;
        }

        Children = (await UmbracoClient.GetChildrenByPath(
                Page.Route.Path,
                filter: _currentTags.Any() ? new[] { $"tags:{string.Join(',', _currentTags)}" } : null,
                sort: _currentSort != null ? new[] { $"{_currentSort.SortName}:{_currentSort.SortOrder}" } : null))
            .OfType<UmbracoDemo.Client.Models.Pages.BlogDetail>().ToList();

        if (_previousPage != Page)
        {
            _tags = Children.SelectMany(c => c.Tags ?? Enumerable.Empty<string>()).Distinct().ToList();
        }

        _previousPage = Page;
    }

    public class SortItem
    {
        public string Label { get; set; }

        public string SortName { get; set; }

        public string SortOrder { get; set; }

        public SortItem(string label, string sortName, string sortOrder)
        {
            Label = label;
            SortName = sortName;
            SortOrder = sortOrder;
        }
    }
}